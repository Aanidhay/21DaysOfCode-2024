/*
Question 2:
Determine if a string can be rearranged such that all characters have the same frequency. If one removal can achieve this, return "valid", otherwise return "invalid".

Inputs:
A string.
Output:
"valid" if the string meets the criteria, otherwise "invalid".
Example:
string = "aabbcc"

Output: valid
 */

import java.util.HashMap;
import java.util.Map;

public class Day4_Q2 {

    public static String isValid(String s) {
        // Count the frequency of each character
        Map<Character, Integer> charCount = new HashMap<>();
        for (char c : s.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }

        // Count the frequency of these frequencies
        Map<Integer, Integer> freqCount = new HashMap<>();
        for (int count : charCount.values()) {
            freqCount.put(count, freqCount.getOrDefault(count, 0) + 1);
        }

        // Check conditions for validity
        if (freqCount.size() == 1) {
            // All characters have the same frequency
            return "valid";
        } else if (freqCount.size() == 2) {
            int freq1 = -1, count1 = 0;
            int freq2 = -1, count2 = 0;
            for (Map.Entry<Integer, Integer> entry : freqCount.entrySet()) {
                if (freq1 == -1) {
                    freq1 = entry.getKey();
                    count1 = entry.getValue();
                } else {
                    freq2 = entry.getKey();
                    count2 = entry.getValue();
                }
            }

            // Check if we can adjust one character to make frequencies equal
            if ((freq1 == 1 && count1 == 1) || (freq2 == 1 && count2 == 1)) {
                return "valid";
            } else if (Math.abs(freq1 - freq2) == 1 && (count1 == 1 || count2 == 1)) {
                return "valid";
            }
        }

        return "invalid";
    }

    public static void main(String[] args) {
        String str1 = "aabbcc";
        System.out.println(isValid(str1));  
    }
}
